- Test environments
    - [x] dev
        - Ajustar ambiente dev para rodar com o supervisor
    - [x] cloud

      - [x] Revisar o deploy para o cloud
        - [x] settings.py
            ALLOWED_HOSTS
            DEBUG
        - [x] supervisor.conf
            - PORT (variável de ambiente)
        - [x] Dockerfile
            - EXPOSED PORT
        - [x] docker-entrypoint.sh
            - Eliminar testes desnecessarios

      - [] Implementar task default para testar o celery

    monitoring/tasks.py
    ```python  
    from celery import shared_task
    import logging
    logger = logging.getLogger(__name__)

    @shared_task
    def debug_task():
        logger.info("Celery debug task ran successfully!")
        return "Debug task completed"
    ```

    ```python
    from monitoring.tasks import debug_task
    debug_task.delay()
    ```

- Logs rotation
    - [x] factorydash
    - [x] celery
    - [x] gunicorn
    - [x] supervisor

- User interface
    - Following Grok assistance
    - Links: 
        https://factorydash-production.up.railway.app/
        https://factorydash-production.up.railway.app/health/
    - [] Enhance docstrings and type hints
        - [x] models.py
        - [x] tasks.py
        - [x] urls.py
    - New files for UI
        - [] views.py
        - [] consumers.py
        - [] routing.py
        - [] tasks.py (update)
        - [] urls.py (update)
        - [] dashboard.html
        - [] view.py
    - Setup
        - [] requirements.txt
        - [] settings.py
        - [] asgi.py
    - Deal with improvements
        - [] Gemini
        - [] ChatGpt
        - [] Grok



- Documentation
    - [] Code
    - [] README
    - [] Dockerhub (repository)
        - [] Improve the versioning (use a env var instead of github.sha)


## DESCRIPTION

You are a full-stack software developer highly experienced with Server Sider Rendering.
You will create the files for the user interface of the factorydash project.
This project aims to provide Real-time insights for Smart Manufacturing.
I am working on this project for my porftolio.
I intend to strengthen my skills in modern Server-Side Rendering with this stage of the project.
Think as a a strict IT interviewer.

## CONTEXT

- Generate docstrings for all python files, following best practices.
- Use type hints for all functions and methods.
- A working dashboard that pulls & displays NIST machine data
- Django Templates + Bootstrap for UI (keeping it simple).
- Add Real-Time Data Updates 
  - Use Django’s WebSockets (Django Channels).
  - Implement live updates for key metrics on the dashboard.
  - Show a timestamp indicating when data was last updated.
- Build a clean dashboard layout (cards, tables, charts).
- Set up a navbar with links to key views.
- Implement Data Display.
  - Create views & templates to display machine metrics.
  - Use Django ORM queries to retrieve data.
  - Panels for monitoring machine performance:
    - Temperature;
    - Spindle Speed;
    - Feed Rate;
    - Emergency Stop Status;
    - Current machine status (e.g., running/stopped);
    - Recent force readings (F, Fz);
    - Tool usage statistics.
- Add a "Live Data" Indicator:
  - Show last updated timestamp to indicate when the data was last fetched.
- Enable Filtering by Time Range
 - Allow users to view data for the last hour, last day, last week.

Next I will share some files with you.

## ATTACHMENTS

- Directory tree

.
├── Dockerfile
├── LICENSE
├── Makefile
├── README.md
├── TODO
├── app
│   └── factorydash
│       ├── celerybeat-schedule
│       ├── celerybeat-schedule-shm
│       ├── celerybeat-schedule-wal
│       ├── factorydash
│       │   ├── __init__.py
│       │   ├── asgi.py
│       │   ├── celery.py
│       │   ├── settings.py
│       │   ├── settings_test.py
│       │   ├── tests.py
│       │   ├── urls.py
│       │   └── wsgi.py
│       ├── logs
│       ├── manage.py
│       ├── monitoring
│       │   ├── __init__.py
│       │   ├── admin.py
│       │   ├── apps.py
│       │   ├── management
│       │   │   ├── __init__.py
│       │   │   └── commands
│       │   │       ├── __init__.py
│       │   │       ├── cleanup.py
│       │   │       └── load_nist_data.py
│       │   ├── migrations
│       │   │   ├── __init__.py
│       │   ├── models.py
│       │   ├── tasks.py
│       │   ├── tests
│       │   │   ├── test_integration.py
│       │   │   ├── test_load_nist_data.py
│       │   │   ├── test_logging.py
│       │   │   ├── test_models.py
│       │   │   └── test_tasks.py
│       │   ├── tests.py
│       │   └── views.py
│       ├── pytest.ini
│       └── staticfiles
│           └── admin
│               ├── css
│               │   ├── vendor
│               │   │   └── select2
│               ├── img
│               │   ├── gis
│               └── js
│                   ├── admin
│                   └── vendor
│                       ├── jquery
│                       ├── select2
│                       │   ├── LICENSE.md
│                       │   ├── i18n
│                       └── xregexp
│                           ├── LICENSE.txt
├── docker-compose-dev.yaml
├── docker-entrypoint.sh
├── requirements.txt
├── supervisord.conf


- Dockerfile

- requirements.txt

- supervisord.conf

- docker-entrypoint.sh

- deployment.yml

- settings.py

- celery.py

- tests.py

- tasks.py

- cleanup.py

- load_nist_data.py


- UI Sample

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Factory Dashboard</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <style>
        .card {
            margin-bottom: 20px;
        }
        .live-data-indicator {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: #f0f0f0;
            padding: 10px;
            border-radius: 5px;
        }
    </style>
</head>
<body>

    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">Factory Dashboard</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item active">
                    <a class="nav-link" href="#">Home <span class="sr-only">(current)</span></a>
                </li>
                </ul>
        </div>
    </nav>

    <div class="container mt-4">
        <div class="row">
            <div class="col-md-12">
                <h1>Machine Data Dashboard</h1>
            </div>
        </div>

        <div class="row">

            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        Latest Data
                    </div>
                    <div class="card-body">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Data Type</th>
                                    <th>Item ID</th>
                                    <th>Timestamp</th>
                                    <th>Name</th>
                                    <th>Value</th>
                                </tr>
                            </thead>
                            <tbody id="latest-data-table">
                                </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        Time Range Filter
                    </div>
                    <div class="card-body">
                        <select id="time-range-select" class="form-control">
                            <option value="hour">Last Hour</option>
                            <option value="day">Last Day</option>
                            <option value="week">Last Week</option>
                        </select>
                        <button id="filter-button" class="btn btn-primary mt-2">Filter</button>
                    </div>
                </div>

                <div class="card">
                    <div class="card-header">
                        Filtered Data
                    </div>
                    <div class="card-body">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Data Type</th>
                                    <th>Item ID</th>
                                    <th>Timestamp</th>
                                    <th>Name</th>
                                    <th>Value</th>
                                </tr>
                            </thead>
                            <tbody id="filtered-data-table">
                                </tbody>
                        </table>
                    </div>
                </div>
            </div>

        </div>

        <div class="live-data-indicator">
            Last Updated: <span id="last-updated">Loading...</span>
        </div>
    </div>
</body>
</html>

You are a Full Stack Developer helping me with factorydash project.




## DESCRIPTION

You are a full-stack software developer highly experienced with Server Sider Rendering.
This project aims to provide Real-time insights for Smart Manufacturing.
I am working on this project for my porftolio.
I intend to strengthen my skills in modern Server-Side Rendering with this stage of the project.
Think as an strict IT interviewer.

## CONTEXT

- Generate docstrings for all python files, following best practices.
- Use type hints for all functions and methods.
- A working dashboard that pulls & displays NIST machine data
- Django Templates + Bootstrap for UI (keeping it simple).
- Add Real-Time Data Updates 
  - Use Django’s WebSockets (Django Channels).
  - Implement live updates for key metrics on the dashboard.
  - Show a timestamp indicating when data was last updated.
- Implement Data Display.
  - Create views & templates to display machine metrics.
  - Use Django ORM queries to retrieve data.
- Add a "Live Data" Indicator:
  - Show last updated timestamp to indicate when the data was last fetched.

 ## IMPROVEMENTS

- Create a table with the following columns, timestamp ordered, updated in real-time:
    - "Timestamp" (key: timestamp);
    - "Machine ID" (key: data_item_id);
    - "Parameter" (key: name);
    - "Value" (key: value).
- Keep the Last Update (live-indicator). It is working.
- The UI must be simple, beautiful and responsive.
- Files:
    - monitoring/templates/monitoring/dashboard.html
    - monitoring/models.py
    - monitoring/consumers.py
- Observation:
    - The WebSocket connetion is working well. 
      Also, the celery beat and the django task are OK.
      Take care with these.
    - Keep it simple.

